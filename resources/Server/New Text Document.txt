package Client;

import java.io.*;
import java.net.Socket;
import java.util.Scanner;

public class Client {
    // TODO: Declare variables for socket input/output streams
    private static String username;
    public static void main(String[] args) throws Exception {

        try (Socket socket = new Socket("localhost", 12345)) {
            //TODO: Use the socket input and output streams as needed


            Scanner scanner = new Scanner(System.in);

            // --- LOGIN PHASE ---
            System.out.println("===== Welcome to CS Music Room =====");


            boolean loggedIn = false;
            while (!loggedIn) {
                System.out.print("Username: ");
                String username = scanner.nextLine();
                System.out.print("Password: ");
                String password = scanner.nextLine();


                sendLoginRequest(username, password);

                // TODO: Receive and check the server's login response
                // TODO: Set 'loggedIn = true' if credentials are correct; otherwise, prompt again
            }

            // --- ACTION MENU LOOP ---
            while (true) {
                printMenu();
                System.out.print("Enter choice: ");
                String choice = scanner.nextLine();

                switch (choice) {
                    case "1" -> enterChat(scanner);
                    case "2" -> uploadFile(scanner);
                    case "3" -> requestDownload(scanner);
                    case "0" -> {
                        System.out.println("Exiting...");
                        return;
                    }
                    default -> System.out.println("Invalid choice.");
                }
            }

        } catch (IOException e) {
            System.out.println("Connection error: " + e.getMessage());
        }
    }

    private static void printMenu() {
        System.out.println("\n--- Main Menu ---");
        System.out.println("1. Enter chat box");
        System.out.println("2. Upload a file");
        System.out.println("3. Download a file");
        System.out.println("0. Exit");
    }

    private static void sendLoginRequest(String username, String password) {
        //TODO: send the login request
    }
    private static void enterChat(Scanner scanner) throws IOException {
        System.out.print("You have entered the chat ");


        //TODO: Create and start ClientReceiver thread to continuously get new messages from server
        String message_string = "";
        while (!message_string.equalsIgnoreCase("/exit")){
            message_string = scanner.nextLine();

            if (!message_string.equalsIgnoreCase("/exit")){

                sendChatMessage(message_string);
            }
        }
    }

    private static void sendChatMessage(String message_to_send) throws IOException {
        //TODO: send the chat message
    }

    private static void uploadFile(Scanner scanner) throws IOException {

        //TODO: list all files in the resources/Client/<username> folder
        File[] files = null;
        if (files == null || files.length == 0) {
            System.out.println("No files to upload.");
            return;
        }

        // Show available files
        System.out.println("Select a file to upload:");
        for (int i = 0; i < files.length; i++) {
            System.out.println((i + 1) + ". " + files[i].getName());
        }

        System.out.print("Enter file number: ");
        int choice;
        try {
            choice = Integer.parseInt(scanner.nextLine()) - 1;
        } catch (NumberFormatException e) {
            System.out.println("Invalid input.");
            return;
        }

        if (choice < 0 || choice >= files.length) {
            System.out.println("Invalid choice.");
            return;
        }

        // TODO: Notify the server that a file upload is starting (e.g., send file metadata)
        // TODO: Read the file into a byte array and send it over the socket
    }

    private static void requestDownload(Scanner scanner) throws IOException {
        // TODO: Send a request to the server to retrieve the list of available files
        // TODO: Display the file names and prompt the user to select one
        // TODO: Download the selected file and save it to the user's folder in 'resources/Client/<username>'
    }
}

package Client;


public class ClientReceiver implements Runnable {
    // TODO: Declare a variable to hold the input stream from the socket
    public ClientReceiver() {
        // TODO: Modify this constructor to receive either a Socket or an InputStream as a parameter
        // TODO: Initialize the input stream variable using the received parameter
    }

    @Override
    public void run() {
        try {
            while (true) {
                //TODO: Listen for new messages from server
                //TODO: print the  new message in CLI
            }
        } catch (Exception e) {

        }
    }

}
package Server;

import java.io.IOException;
import java.net.Socket;
import java.util.List;

public class ClientHandler implements Runnable {
    private Socket socket;
    // TODO: Declare a variable to hold the input stream from the socket
    // TODO: Declare a variable to hold the output stream from the socket
    private List<ClientHandler> allClients;
    private String username;

    public ClientHandler() {
        // TODO: Modify the constructor as needed
    }

    @Override
    public void run() {
        try {
            while (true) {
                // TODO: Read incoming message from the input stream
                // TODO: Process the message
            }
        } catch (Exception e) {

        } finally {
            //TODO: Update the clients list in Server
        }
    }


    private void sendMessage(String msg){
        //TODO: send the message (chat) to the client
    }
    private void broadcast(String msg) throws IOException {
        //TODO: send the message to every other user currently in the chat room
    }

    private void sendFileList(){
        // TODO: List all files in the server directory
        // TODO: Send a message containing file names as a comma-separated string
    }
    private void sendFile(String fileName){
        // TODO: Send file name and size to client
        // TODO: Send file content as raw bytes
    }
    private void receiveFile(String filename, int fileLength)
    {
        // TODO: Receive uploaded file content and store it in a byte array
        // TODO: after the upload is done, save it using saveUploadedFile
    }
    private void saveUploadedFile(String filename, byte[] data) throws IOException {
        // TODO: Save the byte array to a file in the Server's resources folder
    }

    private void handleLogin(String username, String password) throws IOException, ClassNotFoundException {
        // TODO: Call Server.authenticate(username, password) to check credentials
        // TODO: Send success or failure response to the client
    }

}
package Server;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import Shared.User;
public class Server {
    // Predefined users for authentication
    private static final User[] users = {
            new User("user1", "1234"),
            new User("user2", "1234"),
            new User("user3", "1234"),
            new User("user4", "1234"),
            new User("user5", "1234"),
    };

    // List of currently connected clients
    public static ArrayList<ClientHandler> clients = new ArrayList<>();

    public static void main(String[] args) throws Exception {
        // TODO: Create a ServerSocket listening on a port (e.g., 12345)

        // TODO: Accept incoming client connections in a loop
        //       For each connection:
        //       - Create a new ClientHandler object
        //       - Add it to the 'clients' list
        //       - Start a new thread to handle communication
    }

    public static boolean authenticate(String username, String password) {
        for (User user : users) {
            if (user.getUsername().equals(username) && user.getPassword().equals(password)) {
                return true;
            }
        }
        return false;
    }
}
package Shared;

public class Message {
    /**
     * Note: This class is used to represent structured data exchanged between the client and server
     *       over sockets — such as requests, responses, or commands.
     *
     * This is NOT just a chat message class.
     * It may be used to carry login information, commands, filenames, or other types of data,
     * depending on the message type.
     *
     * You may use Java Serialization or JSON (e.g., via libraries like Gson or Jackson) to send this object.
     *
     * You are allowed — and sometimes expected — to modify or extend this class to suit your needs.
     */
    public int type; // e.g., 0 = login, 1 = chat message, 2 = file upload, etc.
    public String sender;
    public String content;    // chat text, filename, password, etc.

    public Message() {

    }

}package Shared;

public class User {
    private String username;
    private String password;

    public User(String username, String password) {
        this.username = username;
        this.password = password;
    }

    public String getUsername() { return username; }

    public String getPassword() { return password; }
}
